"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var geolocation = require("nativescript-geolocation");
var constants = require("./common/constants");
var requestor = require("./common/requestor");
var locationStore = require("./stores/locationStore");
var utilities = require("./common/utilities");
var moment = require("moment");
var HelloWorldModel = /** @class */ (function (_super) {
    __extends(HelloWorldModel, _super);
    function HelloWorldModel() {
        var _this = _super.call(this) || this;
        if (!geolocation.isEnabled()) {
            geolocation.enableLocationRequest();
        }
        var time_of_day = utilities.getTimeOfDay();
        _this.set('background_class', time_of_day);
        _this.setIconsTab1();
        var location = geolocation.getCurrentLocation({ timeout: 10000 }).
            then(function (loc) {
            if (loc) {
                locationStore.saveLatitude(loc.latitude);
                locationStore.saveLongitude(loc.longitude);
                _this.set('is_loading', true);
                var url = "" + constants.WEATHER_URL + constants.CURRENT_WEATHER_PATH + "?lat=" + loc.latitude + "&lon=" + loc.longitude + "&apikey=" + constants.WEATHER_APIKEY;
                requestor.get(url).then(function (res) {
                    _this.set('is_loading', false);
                    var weather = res.weather[0].main.toLowerCase();
                    var weather_description = res.weather[0].description;
                    var temperature = (res.main.temp);
                    var icon = constants.WEATHER_ICONS[time_of_day][weather];
                    var rain = '0';
                    if (res.rain) {
                        rain = res.rain['3h'];
                    }
                    _this.set('icon', String.fromCharCode(icon));
                    _this.set('temperature', utilities.describeTemperature(Math.floor(temperature)) + " (" + utilities.convertKelvinToCelsius(temperature).toFixed(2) + " \u00B0C)");
                    _this.set('weather', weather_description);
                    _this.set('place', res.name + ", " + res.sys.country);
                    _this.set('wind', utilities.describeWindSpeed(res.wind.speed) + " " + res.wind.speed + "m/s " + utilities.degreeToDirection(res.wind.deg) + " (" + res.wind.deg + "\u00B0)");
                    _this.set('clouds', res.clouds.all + "%");
                    _this.set('pressure', res.main.pressure + " hpa");
                    _this.set('humidity', utilities.describeHumidity(res.main.humidity) + " (" + res.main.humidity + "%)");
                    _this.set('rain', rain + "%");
                    _this.set('sunrise', moment.unix(res.sys.sunrise).format('hh:mm a'));
                    _this.set('sunset', moment.unix(res.sys.sunset).format('hh:mm a'));
                });
            }
        }, function (e) {
            alert(e.message);
        });
        //Forecast request
        var promise = new Promise(function (resolve, reject) {
            resolve(location);
        });
        promise.then(function (res) {
            var forecast_lat = locationStore.getLatitude();
            var forecast_lon = locationStore.getLongitude();
            var url_Forecast = "" + constants.WEATHER_URL + constants.WEATHER_FORECAST_PATH + "?lat=" + forecast_lat + "&lon=" + forecast_lon + "&apikey=" + constants.WEATHER_APIKEY;
            console.log(url_Forecast);
            _this.setIconsTab2();
            requestor.get(url_Forecast).then(function (response) {
                var forecast = _this.getForecast(response);
                _this.set('forecast', forecast);
                console.log(forecast);
            });
        });
        promise.catch(function (err) {
            // This is never called
        });
        return _this;
    }
    HelloWorldModel.prototype.getForecast = function (response) {
        var forecast = [];
        var list = response.list.splice(1);
        list.forEach(function (item) {
            forecast.push({
                day: moment.unix(item.dt).format('MMM DD (ddd)'),
                icon: String.fromCharCode(constants.WEATHER_ICONS['day'][item.weather[0].main.toLowerCase()]),
                temperature: {
                    day: "" + utilities.describeTemperature(item.temp.day),
                    night: "" + utilities.describeTemperature(item.temp.night)
                },
                wind: item.speed + "m/s",
                clouds: item.clouds + "%",
                pressure: item.pressure + " hpa",
                description: item.weather[0].description
            });
        });
        return forecast;
    };
    HelloWorldModel.prototype.setIconsTab2 = function () {
        var _this = this;
        var icons = utilities.getIcons(['temperature', 'wind', 'cloud', 'pressure']);
        icons.forEach(function (item) {
            _this.set(item.name + "_icon", item.icon);
        });
    };
    HelloWorldModel.prototype.setIconsTab1 = function () {
        var _this = this;
        var icons = utilities.getIcons([
            'temperature', 'wind', 'cloud',
            'pressure', 'humidity', 'rain',
            'sunrise', 'sunset'
        ]);
        icons.forEach(function (item) {
            _this.set(item.name + "_icon", item.icon);
        });
    };
    return HelloWorldModel;
}(observable_1.Observable));
exports.HelloWorldModel = HelloWorldModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi12aWV3LW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi12aWV3LW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOENBQTZDO0FBQzdDLHNEQUF5RDtBQUN6RCw4Q0FBaUQ7QUFDakQsOENBQWlEO0FBQ2pELHNEQUF5RDtBQUN6RCw4Q0FBaUQ7QUFDakQsK0JBQWtDO0FBR2xDO0lBQXFDLG1DQUFVO0lBSzNDO1FBQUEsWUFDSSxpQkFBTyxTQWdGVjtRQTlFRyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDdEMsQ0FBQztRQUVELElBQUksV0FBVyxHQUFHLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMzQyxLQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzFDLEtBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUlwQixJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFDLENBQUM7WUFDL0QsSUFBSSxDQUNGLFVBQUMsR0FBRztZQUNGLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBRVIsYUFBYSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3pDLGFBQWEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUUzQyxLQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFFN0IsSUFBSSxHQUFHLEdBQUcsS0FBRyxTQUFTLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQyxvQkFBb0IsYUFBUSxHQUFHLENBQUMsUUFBUSxhQUFRLEdBQUcsQ0FBQyxTQUFTLGdCQUFXLFNBQVMsQ0FBQyxj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QUMsSUFBSTtZQUNqQixLQUFJLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxJQUFJLFVBQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBR0Qsc0NBQVksR0FBWjtRQUFBLGlCQVNHO1FBUkMsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUM3QixhQUFhLEVBQUUsTUFBTSxFQUFFLE9BQU87WUFDOUIsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNO1lBQzlCLFNBQVMsRUFBRSxRQUFRO1NBQ3BCLENBQUMsQ0FBQztRQUNILEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJO1lBQ2pCLEtBQUksQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLElBQUksVUFBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDUCxzQkFBQztBQUFELENBQUMsQUE1SEQsQ0FBcUMsdUJBQVUsR0E0SDlDO0FBNUhZLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgZ2VvbG9jYXRpb24gPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LWdlb2xvY2F0aW9uXCIpO1xuaW1wb3J0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbW1vbi9jb25zdGFudHNcIik7XG5pbXBvcnQgcmVxdWVzdG9yID0gcmVxdWlyZShcIi4vY29tbW9uL3JlcXVlc3RvclwiKTtcbmltcG9ydCBsb2NhdGlvblN0b3JlID0gcmVxdWlyZSgnLi9zdG9yZXMvbG9jYXRpb25TdG9yZScpO1xuaW1wb3J0IHV0aWxpdGllcyA9IHJlcXVpcmUoJy4vY29tbW9uL3V0aWxpdGllcycpO1xuaW1wb3J0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG5cbmV4cG9ydCBjbGFzcyBIZWxsb1dvcmxkTW9kZWwgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcblxuICAgIHByaXZhdGUgX2NvdW50ZXI6IG51bWJlcjtcbiAgICBwcml2YXRlIF9tZXNzYWdlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBpZiAoIWdlb2xvY2F0aW9uLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBnZW9sb2NhdGlvbi5lbmFibGVMb2NhdGlvblJlcXVlc3QoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdGltZV9vZl9kYXkgPSB1dGlsaXRpZXMuZ2V0VGltZU9mRGF5KCk7XG4gICAgICAgICAgdGhpcy5zZXQoJ2JhY2tncm91bmRfY2xhc3MnLCB0aW1lX29mX2RheSk7ICAgICAgICAgIFxuICAgICAgICAgIHRoaXMuc2V0SWNvbnNUYWIxKCk7XG5cbiAgICAgICAgICBcblxuICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGdlb2xvY2F0aW9uLmdldEN1cnJlbnRMb2NhdGlvbih7dGltZW91dDogMTAwMDB9KS5cbiAgICAgICAgICB0aGVuKFxuICAgICAgICAgICAgKGxvYykgPT4ge1xuICAgICAgICAgICAgICBpZiAobG9jKSB7XG5cbiAgICAgICAgICAgICAgICBsb2NhdGlvblN0b3JlLnNhdmVMYXRpdHVkZShsb2MubGF0aXR1ZGUpO1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uU3RvcmUuc2F2ZUxvbmdpdHVkZShsb2MubG9uZ2l0dWRlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KCdpc19sb2FkaW5nJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBgJHtjb25zdGFudHMuV0VBVEhFUl9VUkx9JHtjb25zdGFudHMuQ1VSUkVOVF9XRUFUSEVSX1BBVEh9P2xhdD0ke2xvYy5sYXRpdHVkZX0mbG9uPSR7bG9jLmxvbmdpdHVkZX0mYXBpa2V5PSR7Y29uc3RhbnRzLldFQVRIRVJfQVBJS0VZfWA7XG4gICAgICAgICAgICAgICAgcmVxdWVzdG9yLmdldCh1cmwpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KCdpc19sb2FkaW5nJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciB3ZWF0aGVyID0gcmVzLndlYXRoZXJbMF0ubWFpbi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHZhciB3ZWF0aGVyX2Rlc2NyaXB0aW9uID0gcmVzLndlYXRoZXJbMF0uZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBlcmF0dXJlID0gKHJlcy5tYWluLnRlbXApO1xuICAgICAgICAgICAgICAgIHZhciBpY29uID0gY29uc3RhbnRzLldFQVRIRVJfSUNPTlNbdGltZV9vZl9kYXldW3dlYXRoZXJdO1xuICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHJhaW4gPSAnMCc7XG4gICAgICAgICAgICAgICAgICBpZihyZXMucmFpbil7XG4gICAgICAgICAgICAgICAgICAgICAgcmFpbiA9IHJlcy5yYWluWyczaCddO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldCgnaWNvbicsIFN0cmluZy5mcm9tQ2hhckNvZGUoaWNvbikpO1xuICAgICAgICAgICAgdGhpcy5zZXQoJ3RlbXBlcmF0dXJlJywgYCR7dXRpbGl0aWVzLmRlc2NyaWJlVGVtcGVyYXR1cmUoTWF0aC5mbG9vcih0ZW1wZXJhdHVyZSkpfSAoJHt1dGlsaXRpZXMuY29udmVydEtlbHZpblRvQ2Vsc2l1cyh0ZW1wZXJhdHVyZSkudG9GaXhlZCgyKX0gwrBDKWApO1xuICAgICAgICAgICAgdGhpcy5zZXQoJ3dlYXRoZXInLCB3ZWF0aGVyX2Rlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KCdwbGFjZScsIGAke3Jlcy5uYW1lfSwgJHtyZXMuc3lzLmNvdW50cnl9YCk7XG4gICAgICAgICAgICB0aGlzLnNldCgnd2luZCcsIGAke3V0aWxpdGllcy5kZXNjcmliZVdpbmRTcGVlZChyZXMud2luZC5zcGVlZCl9ICR7cmVzLndpbmQuc3BlZWR9bS9zICR7dXRpbGl0aWVzLmRlZ3JlZVRvRGlyZWN0aW9uKHJlcy53aW5kLmRlZyl9ICgke3Jlcy53aW5kLmRlZ33CsClgKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KCdjbG91ZHMnLCBgJHtyZXMuY2xvdWRzLmFsbH0lYCk7XG4gICAgICAgICAgICB0aGlzLnNldCgncHJlc3N1cmUnLCBgJHtyZXMubWFpbi5wcmVzc3VyZX0gaHBhYCk7XG4gICAgICAgICAgICB0aGlzLnNldCgnaHVtaWRpdHknLCBgJHt1dGlsaXRpZXMuZGVzY3JpYmVIdW1pZGl0eShyZXMubWFpbi5odW1pZGl0eSl9ICgke3Jlcy5tYWluLmh1bWlkaXR5fSUpYCk7XG4gICAgICAgICAgICB0aGlzLnNldCgncmFpbicsIGAke3JhaW59JWApO1xuICAgICAgICAgICAgdGhpcy5zZXQoJ3N1bnJpc2UnLCBtb21lbnQudW5peChyZXMuc3lzLnN1bnJpc2UpLmZvcm1hdCgnaGg6bW0gYScpKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KCdzdW5zZXQnLCBtb21lbnQudW5peChyZXMuc3lzLnN1bnNldCkuZm9ybWF0KCdoaDptbSBhJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZSkgPT4ge1xuICAgICAgICAgICAgICBhbGVydChlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vRm9yZWNhc3QgcmVxdWVzdFxuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmUobG9jYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcm9taXNlLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICB2YXIgZm9yZWNhc3RfbGF0ID0gbG9jYXRpb25TdG9yZS5nZXRMYXRpdHVkZSgpO1xuICAgICAgICAgICAgICB2YXIgZm9yZWNhc3RfbG9uID0gbG9jYXRpb25TdG9yZS5nZXRMb25naXR1ZGUoKTtcbiAgICAgICAgICAgICAgdmFyIHVybF9Gb3JlY2FzdCA9IGAke2NvbnN0YW50cy5XRUFUSEVSX1VSTH0ke2NvbnN0YW50cy5XRUFUSEVSX0ZPUkVDQVNUX1BBVEh9P2xhdD0ke2ZvcmVjYXN0X2xhdH0mbG9uPSR7Zm9yZWNhc3RfbG9ufSZhcGlrZXk9JHtjb25zdGFudHMuV0VBVEhFUl9BUElLRVl9YDtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2codXJsX0ZvcmVjYXN0KTtcbiAgICAgICAgICAgICAgdGhpcy5zZXRJY29uc1RhYjIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgcmVxdWVzdG9yLmdldCh1cmxfRm9yZWNhc3QpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBmb3JlY2FzdCA9IHRoaXMuZ2V0Rm9yZWNhc3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KCdmb3JlY2FzdCcsIGZvcmVjYXN0KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmb3JlY2FzdCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcm9taXNlLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBuZXZlciBjYWxsZWRcbiAgICAgICAgICAgIH0pOyBcbiAgICAgICAgICBcbiAgICB9XG4gICAgZ2V0Rm9yZWNhc3QocmVzcG9uc2UpIHtcbiAgICAgIHZhciBmb3JlY2FzdCA9IFtdO1xuICAgICAgdmFyIGxpc3QgPSByZXNwb25zZS5saXN0LnNwbGljZSgxKTtcbiAgICAgIGxpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBmb3JlY2FzdC5wdXNoKHtcbiAgICAgICAgICBkYXk6IG1vbWVudC51bml4KGl0ZW0uZHQpLmZvcm1hdCgnTU1NIEREIChkZGQpJyksXG4gICAgICAgICAgaWNvbjogU3RyaW5nLmZyb21DaGFyQ29kZShjb25zdGFudHMuV0VBVEhFUl9JQ09OU1snZGF5J11baXRlbS53ZWF0aGVyWzBdLm1haW4udG9Mb3dlckNhc2UoKV0pLFxuICAgICAgICAgIHRlbXBlcmF0dXJlOiB7XG4gICAgICAgICAgICBkYXk6IGAke3V0aWxpdGllcy5kZXNjcmliZVRlbXBlcmF0dXJlKGl0ZW0udGVtcC5kYXkpfWAsXG4gICAgICAgICAgICBuaWdodDpgJHt1dGlsaXRpZXMuZGVzY3JpYmVUZW1wZXJhdHVyZShpdGVtLnRlbXAubmlnaHQpfWBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHdpbmQ6IGAke2l0ZW0uc3BlZWR9bS9zYCxcbiAgICAgICAgICBjbG91ZHM6IGAke2l0ZW0uY2xvdWRzfSVgLFxuICAgICAgICAgIHByZXNzdXJlOiBgJHtpdGVtLnByZXNzdXJlfSBocGFgLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBpdGVtLndlYXRoZXJbMF0uZGVzY3JpcHRpb25cbiAgICAgICAgfSlcbiAgICAgIH0pOyAgXG4gICAgICByZXR1cm4gZm9yZWNhc3Q7XG4gICAgfVxuICAgIHNldEljb25zVGFiMigpIHtcbiAgICAgIHZhciBpY29ucyA9IHV0aWxpdGllcy5nZXRJY29ucyhbJ3RlbXBlcmF0dXJlJywgJ3dpbmQnLCAnY2xvdWQnLCAncHJlc3N1cmUnXSk7XG4gICAgICBpY29ucy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0KGAke2l0ZW0ubmFtZX1faWNvbmAsIGl0ZW0uaWNvbik7XG4gICAgICB9KTtcbiAgICB9ICBcblxuICAgIFxuICAgIHNldEljb25zVGFiMSgpIHtcbiAgICAgICAgdmFyIGljb25zID0gdXRpbGl0aWVzLmdldEljb25zKFtcbiAgICAgICAgICAndGVtcGVyYXR1cmUnLCAnd2luZCcsICdjbG91ZCcsXG4gICAgICAgICAgJ3ByZXNzdXJlJywgJ2h1bWlkaXR5JywgJ3JhaW4nLFxuICAgICAgICAgICdzdW5yaXNlJywgJ3N1bnNldCdcbiAgICAgICAgXSk7XG4gICAgICAgIGljb25zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICB0aGlzLnNldChgJHtpdGVtLm5hbWV9X2ljb25gLCBpdGVtLmljb24pO1xuICAgICAgICB9KTtcbiAgICAgIH0gICBcbn1cbiJdfQ==