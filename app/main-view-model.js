"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var geolocation = require("nativescript-geolocation");
var constants = require("./common/constants");
var requestor = require("./common/requestor");
var locationStore = require("./stores/locationStore");
var utilities = require("./common/utilities");
var moment = require("moment");
var HelloWorldModel = /** @class */ (function (_super) {
    __extends(HelloWorldModel, _super);
    function HelloWorldModel() {
        var _this = _super.call(this) || this;
        if (!geolocation.isEnabled()) {
            geolocation.enableLocationRequest();
        }
        var time_of_day = utilities.getTimeOfDay();
        _this.set('background_class', time_of_day);
        _this.setIcons();
        var location = geolocation.getCurrentLocation({ timeout: 10000 }).
            then(function (loc) {
            if (loc) {
                locationStore.saveLocation(loc);
                _this.set('is_loading', true);
                var url = "" + constants.WEATHER_URL + constants.CURRENT_WEATHER_PATH + "?lat=" + loc.latitude + "&lon=" + loc.longitude + "&apikey=" + constants.WEATHER_APIKEY;
                requestor.get(url).then(function (res) {
                    _this.set('is_loading', false);
                    var weather = res.weather[0].main.toLowerCase();
                    var weather_description = res.weather[0].description;
                    var temperature = (res.main.temp);
                    var icon = constants.WEATHER_ICONS[time_of_day][weather];
                    var rain = '0';
                    if (res.rain) {
                        rain = res.rain['3h'];
                    }
                    _this.set('icon', String.fromCharCode(icon));
                    _this.set('temperature', utilities.describeTemperature(Math.floor(temperature)) + " (" + utilities.convertKelvinToCelsius(temperature).toFixed(2) + " \u00B0C)");
                    _this.set('weather', weather_description);
                    _this.set('place', res.name + ", " + res.sys.country);
                    _this.set('wind', utilities.describeWindSpeed(res.wind.speed) + " " + res.wind.speed + "m/s " + utilities.degreeToDirection(res.wind.deg) + " (" + res.wind.deg + "\u00B0)");
                    _this.set('clouds', res.clouds.all + "%");
                    _this.set('pressure', res.main.pressure + " hpa");
                    _this.set('humidity', utilities.describeHumidity(res.main.humidity) + " (" + res.main.humidity + "%)");
                    _this.set('rain', rain + "%");
                    _this.set('sunrise', moment.unix(res.sys.sunrise).format('hh:mm a'));
                    _this.set('sunset', moment.unix(res.sys.sunset).format('hh:mm a'));
                });
            }
        }, function (e) {
            alert(e.message);
        });
        return _this;
        //Forecast request
        // var forecast_location = locationStore.getLocation();
        // var url_Forecast = `${constants.WEATHER_URL}${constants.WEATHER_FORECAST_PATH}?lat=${forecast_location.latitude}&lon=${forecast_location.longitude}&apikey=${constants.WEATHER_APIKEY}`;
        // // this.set('is_loading', true);
        // // this.setIcons();
        // requestor.get(url_Forecast).then((response) => {
        // this.set('is_loading', false);
        // var forecast = this.getForecast(response);
        // this.set('forecast', forecast);
        // });
    }
    HelloWorldModel.prototype.getForecast = function (response) {
        var forecast = [];
        var list = response.list.splice(1);
        list.forEach(function (item) {
            forecast.push({
                day: moment.unix(item.dt).format('MMM DD (ddd)'),
                icon: String.fromCharCode(constants.WEATHER_ICONS['day'][item.weather[0].main.toLowerCase()]),
                temperature: {
                    day: "" + utilities.describeTemperature(item.temp.day),
                    night: "" + utilities.describeTemperature(item.temp.night)
                },
                wind: item.speed + "m/s",
                clouds: item.clouds + "%",
                pressure: item.pressure + " hpa",
                description: item.weather[0].description
            });
        });
        return forecast;
    };
    HelloWorldModel.prototype.setIcons = function () {
        var _this = this;
        var icons = utilities.getIcons([
            'temperature', 'wind', 'cloud',
            'pressure', 'humidity', 'rain',
            'sunrise', 'sunset'
        ]);
        icons.forEach(function (item) {
            _this.set(item.name + "_icon", item.icon);
        });
    };
    return HelloWorldModel;
}(observable_1.Observable));
exports.HelloWorldModel = HelloWorldModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi12aWV3LW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi12aWV3LW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOENBQTZDO0FBQzdDLHNEQUF5RDtBQUN6RCw4Q0FBaUQ7QUFDakQsOENBQWlEO0FBQ2pELHNEQUF5RDtBQUN6RCw4Q0FBaUQ7QUFDakQsK0JBQWtDO0FBR2xDO0lBQXFDLG1DQUFVO0lBSzNDO1FBQUEsWUFDSSxpQkFBTyxTQW9FVjtRQWxFRyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDdEMsQ0FBQztRQUVELElBQUksV0FBVyxHQUFHLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMzQyxLQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzFDLEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUloQixJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFDLENBQUM7WUFDL0QsSUFBSSxDQUNGLFVBQUMsR0FBRztZQUNGLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsYUFBYSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDaEMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBRTdCLElBQUksR0FBRyxHQUFHLEtBQUcsU0FBUyxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUMsb0JBQW9CLGFBQVEsR0FBRyxDQUFDLFFBQVEsYUFBUSxHQUFHLENBQUMsU0FBUyxnQkFBVyxTQUFTLENBQUMsY0FBZ0IsQ0FBQztnQkFDbEosU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMs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LENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBSUQsa0NBQVEsR0FBUjtRQUFBLGlCQVNHO1FBUkMsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUM3QixhQUFhLEVBQUUsTUFBTSxFQUFFLE9BQU87WUFDOUIsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNO1lBQzlCLFNBQVMsRUFBRSxRQUFRO1NBQ3BCLENBQUMsQ0FBQztRQUNILEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJO1lBQ2pCLEtBQUksQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLElBQUksVUFBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHUCxzQkFBQztBQUFELENBQUMsQUE5R0QsQ0FBcUMsdUJBQVUsR0E4RzlDO0FBOUdZLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgZ2VvbG9jYXRpb24gPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LWdlb2xvY2F0aW9uXCIpO1xuaW1wb3J0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbW1vbi9jb25zdGFudHNcIik7XG5pbXBvcnQgcmVxdWVzdG9yID0gcmVxdWlyZShcIi4vY29tbW9uL3JlcXVlc3RvclwiKTtcbmltcG9ydCBsb2NhdGlvblN0b3JlID0gcmVxdWlyZSgnLi9zdG9yZXMvbG9jYXRpb25TdG9yZScpO1xuaW1wb3J0IHV0aWxpdGllcyA9IHJlcXVpcmUoJy4vY29tbW9uL3V0aWxpdGllcycpO1xuaW1wb3J0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG5cbmV4cG9ydCBjbGFzcyBIZWxsb1dvcmxkTW9kZWwgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcblxuICAgIHByaXZhdGUgX2NvdW50ZXI6IG51bWJlcjtcbiAgICBwcml2YXRlIF9tZXNzYWdlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBpZiAoIWdlb2xvY2F0aW9uLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBnZW9sb2NhdGlvbi5lbmFibGVMb2NhdGlvblJlcXVlc3QoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgdGltZV9vZl9kYXkgPSB1dGlsaXRpZXMuZ2V0VGltZU9mRGF5KCk7XG4gICAgICAgICAgdGhpcy5zZXQoJ2JhY2tncm91bmRfY2xhc3MnLCB0aW1lX29mX2RheSk7ICAgICAgICAgIFxuICAgICAgICAgIHRoaXMuc2V0SWNvbnMoKTtcblxuICAgICAgICAgIFxuXG4gICAgICAgICAgdmFyIGxvY2F0aW9uID0gZ2VvbG9jYXRpb24uZ2V0Q3VycmVudExvY2F0aW9uKHt0aW1lb3V0OiAxMDAwMH0pLlxuICAgICAgICAgIHRoZW4oXG4gICAgICAgICAgICAobG9jKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChsb2MpIHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvblN0b3JlLnNhdmVMb2NhdGlvbihsb2MpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KCdpc19sb2FkaW5nJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBgJHtjb25zdGFudHMuV0VBVEhFUl9VUkx9JHtjb25zdGFudHMuQ1VSUkVOVF9XRUFUSEVSX1BBVEh9P2xhdD0ke2xvYy5sYXRpdHVkZX0mbG9uPSR7bG9jLmxvbmdpdHVkZX0mYXBpa2V5PSR7Y29uc3RhbnRzLldFQVRIRVJfQVBJS0VZfWA7XG4gICAgICAgICAgICAgICAgcmVxdWVzdG9yLmdldCh1cmwpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KCdpc19sb2FkaW5nJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciB3ZWF0aGVyID0gcmVzLndlYXRoZXJbMF0ubWFpbi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHZhciB3ZWF0aGVyX2Rlc2NyaXB0aW9uID0gcmVzLndlYXRoZXJbMF0uZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBlcmF0dXJlID0gKHJlcy5tYWluLnRlbXApO1xuICAgICAgICAgICAgICAgIHZhciBpY29uID0gY29uc3RhbnRzLldFQVRIRVJfSUNPTlNbdGltZV9vZl9kYXldW3dlYXRoZXJdO1xuICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHJhaW4gPSAnMCc7XG4gICAgICAgICAgICAgICAgICBpZihyZXMucmFpbil7XG4gICAgICAgICAgICAgICAgICAgICAgcmFpbiA9IHJlcy5yYWluWyczaCddO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldCgnaWNvbicsIFN0cmluZy5mcm9tQ2hhckNvZGUoaWNvbikpO1xuICAgICAgICAgICAgdGhpcy5zZXQoJ3RlbXBlcmF0dXJlJywgYCR7dXRpbGl0aWVzLmRlc2NyaWJlVGVtcGVyYXR1cmUoTWF0aC5mbG9vcih0ZW1wZXJhdHVyZSkpfSAoJHt1dGlsaXRpZXMuY29udmVydEtlbHZpblRvQ2Vsc2l1cyh0ZW1wZXJhdHVyZSkudG9GaXhlZCgyKX0gwrBDKWApO1xuICAgICAgICAgICAgdGhpcy5zZXQoJ3dlYXRoZXInLCB3ZWF0aGVyX2Rlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KCdwbGFjZScsIGAke3Jlcy5uYW1lfSwgJHtyZXMuc3lzLmNvdW50cnl9YCk7XG4gICAgICAgICAgICB0aGlzLnNldCgnd2luZCcsIGAke3V0aWxpdGllcy5kZXNjcmliZVdpbmRTcGVlZChyZXMud2luZC5zcGVlZCl9ICR7cmVzLndpbmQuc3BlZWR9bS9zICR7dXRpbGl0aWVzLmRlZ3JlZVRvRGlyZWN0aW9uKHJlcy53aW5kLmRlZyl9ICgke3Jlcy53aW5kLmRlZ33CsClgKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KCdjbG91ZHMnLCBgJHtyZXMuY2xvdWRzLmFsbH0lYCk7XG4gICAgICAgICAgICB0aGlzLnNldCgncHJlc3N1cmUnLCBgJHtyZXMubWFpbi5wcmVzc3VyZX0gaHBhYCk7XG4gICAgICAgICAgICB0aGlzLnNldCgnaHVtaWRpdHknLCBgJHt1dGlsaXRpZXMuZGVzY3JpYmVIdW1pZGl0eShyZXMubWFpbi5odW1pZGl0eSl9ICgke3Jlcy5tYWluLmh1bWlkaXR5fSUpYCk7XG4gICAgICAgICAgICB0aGlzLnNldCgncmFpbicsIGAke3JhaW59JWApO1xuICAgICAgICAgICAgdGhpcy5zZXQoJ3N1bnJpc2UnLCBtb21lbnQudW5peChyZXMuc3lzLnN1bnJpc2UpLmZvcm1hdCgnaGg6bW0gYScpKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KCdzdW5zZXQnLCBtb21lbnQudW5peChyZXMuc3lzLnN1bnNldCkuZm9ybWF0KCdoaDptbSBhJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZSkgPT4ge1xuICAgICAgICAgICAgICBhbGVydChlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vRm9yZWNhc3QgcmVxdWVzdFxuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIC8vIHZhciBmb3JlY2FzdF9sb2NhdGlvbiA9IGxvY2F0aW9uU3RvcmUuZ2V0TG9jYXRpb24oKTtcbiAgICAgICAgICAgIC8vIHZhciB1cmxfRm9yZWNhc3QgPSBgJHtjb25zdGFudHMuV0VBVEhFUl9VUkx9JHtjb25zdGFudHMuV0VBVEhFUl9GT1JFQ0FTVF9QQVRIfT9sYXQ9JHtmb3JlY2FzdF9sb2NhdGlvbi5sYXRpdHVkZX0mbG9uPSR7Zm9yZWNhc3RfbG9jYXRpb24ubG9uZ2l0dWRlfSZhcGlrZXk9JHtjb25zdGFudHMuV0VBVEhFUl9BUElLRVl9YDtcblxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyAvLyB0aGlzLnNldCgnaXNfbG9hZGluZycsIHRydWUpO1xuICAgICAgICAgICAgLy8gLy8gdGhpcy5zZXRJY29ucygpO1xuXG4gICAgICAgICAgICAvLyByZXF1ZXN0b3IuZ2V0KHVybF9Gb3JlY2FzdCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0KCdpc19sb2FkaW5nJywgZmFsc2UpO1xuICAgICAgICAgICAgLy8gdmFyIGZvcmVjYXN0ID0gdGhpcy5nZXRGb3JlY2FzdChyZXNwb25zZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldCgnZm9yZWNhc3QnLCBmb3JlY2FzdCk7XG4gICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICBcbiAgICB9XG4gICAgcHJpdmF0ZSBnZXRGb3JlY2FzdChyZXNwb25zZSkge1xuICAgICAgdmFyIGZvcmVjYXN0ID0gW107XG4gICAgICB2YXIgbGlzdCA9IHJlc3BvbnNlLmxpc3Quc3BsaWNlKDEpO1xuICAgICAgbGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGZvcmVjYXN0LnB1c2goe1xuICAgICAgICAgIGRheTogbW9tZW50LnVuaXgoaXRlbS5kdCkuZm9ybWF0KCdNTU0gREQgKGRkZCknKSxcbiAgICAgICAgICBpY29uOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbnN0YW50cy5XRUFUSEVSX0lDT05TWydkYXknXVtpdGVtLndlYXRoZXJbMF0ubWFpbi50b0xvd2VyQ2FzZSgpXSksXG4gICAgICAgICAgdGVtcGVyYXR1cmU6IHtcbiAgICAgICAgICAgIGRheTogYCR7dXRpbGl0aWVzLmRlc2NyaWJlVGVtcGVyYXR1cmUoaXRlbS50ZW1wLmRheSl9YCxcbiAgICAgICAgICAgIG5pZ2h0OiBgJHt1dGlsaXRpZXMuZGVzY3JpYmVUZW1wZXJhdHVyZShpdGVtLnRlbXAubmlnaHQpfWBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHdpbmQ6IGAke2l0ZW0uc3BlZWR9bS9zYCxcbiAgICAgICAgICBjbG91ZHM6IGAke2l0ZW0uY2xvdWRzfSVgLFxuICAgICAgICAgIHByZXNzdXJlOiBgJHtpdGVtLnByZXNzdXJlfSBocGFgLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBpdGVtLndlYXRoZXJbMF0uZGVzY3JpcHRpb25cbiAgICAgICAgfSlcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZm9yZWNhc3Q7XG4gICAgfVxuXG5cbiAgICBcbiAgICBzZXRJY29ucygpIHtcbiAgICAgICAgdmFyIGljb25zID0gdXRpbGl0aWVzLmdldEljb25zKFtcbiAgICAgICAgICAndGVtcGVyYXR1cmUnLCAnd2luZCcsICdjbG91ZCcsXG4gICAgICAgICAgJ3ByZXNzdXJlJywgJ2h1bWlkaXR5JywgJ3JhaW4nLFxuICAgICAgICAgICdzdW5yaXNlJywgJ3N1bnNldCdcbiAgICAgICAgXSk7XG4gICAgICAgIGljb25zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICB0aGlzLnNldChgJHtpdGVtLm5hbWV9X2ljb25gLCBpdGVtLmljb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgXG59XG4iXX0=