"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var geolocation = require("nativescript-geolocation");
var constants = require("./common/constants");
var requestor = require("./common/requestor");
var locationStore = require("./stores/locationStore");
var utilities = require("./common/utilities");
var moment = require("moment");
var HelloWorldModel = /** @class */ (function (_super) {
    __extends(HelloWorldModel, _super);
    function HelloWorldModel() {
        var _this = _super.call(this) || this;
        if (!geolocation.isEnabled()) {
            geolocation.enableLocationRequest();
        }
        var location = geolocation.getCurrentLocation({ timeout: 10000 }).
            then(function (loc) {
            if (loc) {
                locationStore.saveLocation(loc);
                _this.set('is_loading', true);
                var url = "" + constants.WEATHER_URL + constants.CURRENT_WEATHER_PATH + "?lat=" + loc.latitude + "&lon=" + loc.longitude + "&apikey=" + constants.WEATHER_APIKEY;
                requestor.get(url).then(function (res) {
                    _this.set('is_loading', false);
                    var weather = res.weather[0].main.toLowerCase();
                    var weather_description = res.weather[0].description;
                    var temperature = (res.main.temp) - 273.15;
                    console.log(weather);
                    console.log(weather_description);
                    console.log(temperature);
                    var rain = '0';
                    if (res.rain) {
                        rain = res.rain['3h'];
                    }
                });
            }
        }, function (e) {
            alert(e.message);
        });
        //Forecast request
        var locationForecast = locationStore.getLocation();
        var url = "" + constants.WEATHER_URL + constants.WEATHER_FORECAST_PATH + "?cnt=6&lat=" + locationForecast.latitude + "&lon=" + locationForecast.longitude + "&apikey=" + constants.WEATHER_APIKEY;
        var time_of_day = utilities.getTimeOfDay();
        _this.set('is_loading', true);
        _this.set('background_class', time_of_day);
        _this.setIcons();
        requestor.get(url).then(function (response) {
            _this.set('is_loading', false);
            var forecast = _this.getForecast(response);
            _this.set('forecast', forecast);
        });
        return _this;
    }
    HelloWorldModel.prototype.getForecast = function (response) {
        var forecast = [];
        var list = response.list.splice(1);
        list.forEach(function (item) {
            forecast.push({
                day: moment.unix(item.dt).format('MMM DD (ddd)'),
                icon: String.fromCharCode(constants.WEATHER_ICONS['day'][item.weather[0].main.toLowerCase()]),
                temperature: {
                    day: "" + utilities.describeTemperature(item.temp.day),
                    night: "" + utilities.describeTemperature(item.temp.night)
                },
                wind: item.speed + "m/s",
                clouds: item.clouds + "%",
                pressure: item.pressure + " hpa",
                description: item.weather[0].description
            });
        });
        return forecast;
    };
    HelloWorldModel.prototype.setIcons = function () {
        var _this = this;
        var icons = utilities.getIcons(['temperature', 'wind', 'cloud', 'pressure']);
        icons.forEach(function (item) {
            _this.set(item.name + "_icon", item.icon);
        });
    };
    return HelloWorldModel;
}(observable_1.Observable));
exports.HelloWorldModel = HelloWorldModel;
//# sourceMappingURL=data:application/json;base64,