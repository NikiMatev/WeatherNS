"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var geolocation = require("nativescript-geolocation");
var constants = require("./common/constants");
var requestor = require("./common/requestor");
var locationStore = require("./stores/locationStore");
var utilities = require("./common/utilities");
var moment = require("moment");
var HelloWorldModel = /** @class */ (function (_super) {
    __extends(HelloWorldModel, _super);
    function HelloWorldModel() {
        var _this = _super.call(this) || this;
        if (!geolocation.isEnabled()) {
            geolocation.enableLocationRequest();
        }
        var time_of_day = utilities.getTimeOfDay();
        _this.set('background_class', time_of_day);
        _this.setIcons();
        var location = geolocation.getCurrentLocation({ timeout: 10000 }).
            then(function (loc) {
            if (loc) {
                locationStore.saveLocation(loc);
                _this.set('is_loading', true);
                var url = "" + constants.WEATHER_URL + constants.CURRENT_WEATHER_PATH + "?lat=" + loc.latitude + "&lon=" + loc.longitude + "&apikey=" + constants.WEATHER_APIKEY;
                requestor.get(url).then(function (res) {
                    _this.set('is_loading', false);
                    var weather = res.weather[0].main.toLowerCase();
                    var weather_description = res.weather[0].description;
                    var temperature = (res.main.temp) - 273.15;
                    var icon = constants.WEATHER_ICONS[time_of_day][weather];
                    var rain = '0';
                    if (res.rain) {
                        rain = res.rain['3h'];
                    }
                    _this.set('icon', String.fromCharCode(icon));
                    _this.set('temperature', utilities.describeTemperature(Math.floor(temperature)) + " (" + utilities.convertKelvinToCelsius(temperature).toFixed(2) + " \u00B0C)");
                    _this.set('weather', weather_description);
                    _this.set('place', res.name + ", " + res.sys.country);
                    _this.set('wind', utilities.describeWindSpeed(res.wind.speed) + " " + res.wind.speed + "m/s " + utilities.degreeToDirection(res.wind.deg) + " (" + res.wind.deg + "\u00B0)");
                    _this.set('clouds', res.clouds.all + "%");
                    _this.set('pressure', res.main.pressure + " hpa");
                    _this.set('humidity', utilities.describeHumidity(res.main.humidity) + " (" + res.main.humidity + "%)");
                    _this.set('rain', rain + "%");
                    _this.set('sunrise', moment.unix(res.sys.sunrise).format('hh:mm a'));
                    _this.set('sunset', moment.unix(res.sys.sunset).format('hh:mm a'));
                });
            }
        }, function (e) {
            alert(e.message);
        });
        return _this;
        //Forecast request
    }
    HelloWorldModel.prototype.setIcons = function () {
        var _this = this;
        var icons = utilities.getIcons([
            'temperature', 'wind', 'cloud',
            'pressure', 'humidity', 'rain',
            'sunrise', 'sunset'
        ]);
        icons.forEach(function (item) {
            _this.set(item.name + "_icon", item.icon);
        });
    };
    return HelloWorldModel;
}(observable_1.Observable));
exports.HelloWorldModel = HelloWorldModel;
//# sourceMappingURL=data:application/json;base64,